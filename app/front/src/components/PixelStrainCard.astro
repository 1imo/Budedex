---
// PixelActUI Strain Card Component
export interface Props {
  strain: {
    name: string;
    url?: string;
    type?: string;
    strain_type?: string;
    category?: string;
    rating?: number;
    thc?: string;
    thc_content?: string;
    positive_effects?: string;
    negative_effects?: string;
    flavors?: string;
    terpenes?: string;
    medical_benefits?: string;
    image_path?: string;
    image_url?: string;
    description?: string;
    aliases?: string;
    parents?: string;
    children?: string;
  };
}

const { strain } = Astro.props;

// Determine strain type with fallback logic
const getStrainType = (strain: any) => {
  if (strain.type && strain.type !== 'Unknown') {
    return strain.type;
  }
  if (strain.strain_type && strain.strain_type !== 'Unknown') {
    return strain.strain_type;
  }
  if (strain.category && strain.category !== 'Unknown') {
    return strain.category;
  }
  // Default based on common strain types
  return 'HYBRID';
};

const strainType = getStrainType(strain);
---

<div class="bg-card rounded-none hover:shadow-(--pixel-box-shadow-hover) transition-all relative">
  <!-- Heart button - top right -->
  <button 
    id={`heart-${strain.name.replace(/\s+/g, '-').toLowerCase()}`}
    class="heart-button-top-right pixel__button pixel-destructive__button box-shadow-margin text-sm font-medium px-3 py-3 flex items-center justify-center z-10 h-12"
    style="top: 16px; right: 0px;"
    title="Add to favorites"
    data-strain-name={strain.name}
    data-action="favorite"
  >
    <svg width="16" height="16" viewBox="0 0 16 16" fill="currentColor" class="pixel-heart-icon">
      <path d="M8 2.5c-1.5-2-4.5-2-6 0s-1.5 4.5 0 6l6 6 6-6c1.5-1.5 1.5-4.5 0-6s-4.5-2-6 0z"/>
    </svg>
  </button>
  
  <div class="py-4">
    
    <!-- Image at top -->
    <img 
      src={`${import.meta.env.PUBLIC_CDN_URL}/strains/${strain.name.toLowerCase().replace(/\s+/g, '-').replace(/[^a-z0-9-]/g, '')}.png`} 
      alt={strain.name}
      class="w-full aspect-square object-cover rounded-none mb-4"
      loading="lazy"
      onerror={`this.src='${import.meta.env.PUBLIC_CDN_URL}/strains/default.png'`}
    />
    
    <!-- Title -->
    <h3 class="font-bold pixel-font uppercase text-lg mb-2 truncate-ellipsis">
      {strain.name}
    </h3>
    
    <!-- Strain type and stars on same row -->
    <div class="flex items-center justify-between">
      <span class="text-muted-foreground text-sm pixel-font uppercase">
        {strainType}
      </span>
      
      {strain.rating && (
        <div class="flex items-center gap-1 transform -translate-y-0.5" id={`star-rating-${strain.name.replace(/\s+/g, '-').toLowerCase()}`} data-rating={strain.rating} title={`${strain.rating.toFixed(1)} / 5`}>
          <!-- Stars will be populated by JavaScript -->
        </div>
      )}
    </div>
  </div>
  
  <!-- Footer -->
  <div class="flex items-center py-4 gap-2">
    <a 
      href={`/strains/${strain.name.toLowerCase().replace(/\s+/g, '-').replace(/:/g, '-colon-').replace(/[^a-z0-9-]/g, '')}`}
      class="pixel__button pixel-default__button box-shadow-margin text-sm font-medium px-4 py-3 flex-1 uppercase flex items-center justify-center h-12"
    >
      VIEW
    </a>
    <button 
      id={`tick-${strain.name.replace(/\s+/g, '-').toLowerCase()}`}
      class="pixel__button pixel-success__button box-shadow-margin text-sm font-medium px-3 py-3 flex items-center justify-center h-12"
      title="Mark as seen"
      data-strain-name={strain.name}
      data-action="seen"
    >
      <svg width="16" height="16" viewBox="0 0 16 16" fill="none" stroke="currentColor" stroke-width="2" class="pixel-check-icon">
        <path d="M13 4L6 11L3 8"/>
      </svg>
    </button>
  </div>
</div>

<style>
  .line-clamp-2 {
    display: -webkit-box;
    -webkit-line-clamp: 2;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }
  
  .truncate-ellipsis {
    text-overflow: ellipsis !important;
    overflow: hidden !important;
    white-space: nowrap !important;
    display: block !important;
    max-width: 100% !important;
  }
  
  .pixel-heart {
    filter: drop-shadow(1px 1px 0px rgba(0,0,0,0.3));
  }
  
  .heart-button-top-right {
    position: absolute !important;
    left: auto !important;
  }
  
  .pixel-star {
    filter: drop-shadow(1px 1px 0px rgba(0,0,0,0.2));
    flex-shrink: 0;
  }
</style>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    // Find all star rating containers in cards
    const starRatingContainers = document.querySelectorAll('[id^="star-rating-"]');
    
    starRatingContainers.forEach(container => {
      const rating = parseFloat(container.getAttribute('data-rating') || '0');
      renderPixelStars(container, rating);
    });

    // Initialize card button animations
    initCardButtonAnimations();
    
    // Load button states for all cards on the page
    loadAllCardButtonStates();
  });

  function initCardButtonAnimations() {
    const heartButtons = document.querySelectorAll('[data-action="favorite"]');
    const tickButtons = document.querySelectorAll('[data-action="seen"]');
    
    heartButtons.forEach(button => {
      button.addEventListener('click', (e) => {
        e.preventDefault();
        handleCardButtonClick(button, true); // true = isHeartBtn
      });
    });
    
    tickButtons.forEach(button => {
      button.addEventListener('click', (e) => {
        e.preventDefault();
        handleCardButtonClick(button, false); // false = isTickBtn
      });
    });
  }

  async function loadAllCardButtonStates() {
    const authToken = localStorage.getItem('auth_token');
    if (!authToken) return;

    // Get all strain names from cards on the page
    const strainNames = [];
    const heartButtons = document.querySelectorAll('[data-action="favorite"]');
    
    heartButtons.forEach(button => {
      const strainName = button.getAttribute('data-strain-name');
      if (strainName && !strainNames.includes(strainName)) {
        strainNames.push(strainName);
      }
    });

    if (strainNames.length === 0) return;

    try {
      // Bulk API call for all strains on the page
      const response = await fetch(`${import.meta.env.PUBLIC_API_URL}/api/rest/account/status`, {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${authToken}`,
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          strain_names: strainNames
        })
      });

      if (!response.ok) return;

      const result = await response.json();
      const statuses = result.data;

      // Update button states based on API response
      statuses.forEach(status => {
        const heartBtn = document.querySelector(`[data-strain-name="${status.strain_name}"][data-action="favorite"]`);
        const tickBtn = document.querySelector(`[data-strain-name="${status.strain_name}"][data-action="seen"]`);
        
        if (status.is_liked && heartBtn) {
          setCardButtonToActiveState(heartBtn, true);
        }
        
        if (status.is_seen && tickBtn) {
          setCardButtonToActiveState(tickBtn, false);
        }
      });
    } catch (error) {
      console.error('Error loading card button states:', error);
    }
  }

  async function handleCardButtonClick(button, isHeartBtn) {
    // Check authentication
    const authToken = localStorage.getItem('auth_token');
    if (!authToken) {
      window.location.href = '/account/sign-in';
      return;
    }

    // Check current state by icon color
    const icon = button.querySelector(isHeartBtn ? '.pixel-heart-icon' : '.pixel-check-icon');
    const currentColor = getComputedStyle(icon).color;
    const buttonDefaultColor = getComputedStyle(button).color;
    
    const isCurrentlyActive = currentColor !== buttonDefaultColor;
    
    try {
      if (isCurrentlyActive) {
        await handleCardRemoveAction(button, isHeartBtn);
      } else {
        await handleCardAddAction(button, isHeartBtn);
      }
    } catch (error) {
      console.error('Card button action failed:', error);
    }
  }

  async function handleCardAddAction(button, isHeartBtn) {
    const strainName = button.getAttribute('data-strain-name');
    const endpoint = isHeartBtn ? '/api/rest/account/favourites' : '/api/rest/account/complete';
    const authToken = localStorage.getItem('auth_token');
    
    try {
      // Start animation
      animateCardButtonClick(button, isHeartBtn);
      
      // Make API call
      const response = await fetch(`${import.meta.env.PUBLIC_API_URL}${endpoint}`, {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${authToken}`,
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          strain_name: strainName
        })
      });
      
      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }
      
      console.log(`Successfully ${isHeartBtn ? 'liked' : 'marked as seen'}: ${strainName}`);
    } catch (error) {
      console.error('Failed to add action:', error);
    }
  }

  async function handleCardRemoveAction(button, isHeartBtn) {
    const strainName = button.getAttribute('data-strain-name');
    const endpoint = isHeartBtn ? '/api/rest/account/favourites' : '/api/rest/account/complete';
    const authToken = localStorage.getItem('auth_token');
    
    try {
      // Start reverse animation
      animateCardButtonReverse(button, isHeartBtn);
      
      // Make DELETE API call
      const response = await fetch(`${import.meta.env.PUBLIC_API_URL}${endpoint}`, {
        method: 'DELETE',
        headers: {
          'Authorization': `Bearer ${authToken}`,
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          strain_name: strainName
        })
      });
      
      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }
      
      console.log(`Successfully removed ${isHeartBtn ? 'like' : 'seen'}: ${strainName}`);
    } catch (error) {
      console.error('Failed to remove action:', error);
    }
  }

  function setCardButtonToActiveState(button, isHeartBtn) {
    const icon = button.querySelector(isHeartBtn ? '.pixel-heart-icon' : '.pixel-check-icon');
    const originalBgColor = isHeartBtn ? '#dc2626' : '#16a34a'; // red-600 or green-600 (darker green)
    
    // Change to parent button style: white background, colored icon
    button.className = button.className.replace(/pixel-destructive__button|pixel-success__button/g, 'pixel-default__button');
    button.style.backgroundColor = 'white';
    
    if (icon) {
      icon.style.color = originalBgColor; // Icon matches original button background
    }
    
    // Add reverse click listener
    button.onclick = () => {
      handleCardButtonClick(button, isHeartBtn);
    };
  }

  function animateCardButtonClick(button, isHeartBtn) {
    const icon = button.querySelector(isHeartBtn ? '.pixel-heart-icon' : '.pixel-check-icon');
    const currentIconColor = getComputedStyle(icon).color;
    const originalBgColor = isHeartBtn ? '#dc2626' : '#16a34a'; // red-600 or green-600 (darker green)
    
    // Set button to clip the expanding circle
    button.style.overflow = 'hidden';
    button.style.position = 'relative';
    
    // Create circle element with current icon color
    const circle = document.createElement('div');
    circle.style.position = 'absolute';
    circle.style.top = '50%';
    circle.style.left = '50%';
    circle.style.width = '4px';
    circle.style.height = '4px';
    circle.style.backgroundColor = currentIconColor;
    circle.style.borderRadius = '50%';
    circle.style.transform = 'translate(-50%, -50%)';
    circle.style.transition = 'width 0.4s cubic-bezier(0.25, 0.46, 0.45, 0.94), height 0.4s cubic-bezier(0.25, 0.46, 0.45, 0.94)';
    circle.style.zIndex = '10';
    
    button.appendChild(circle);
    
    // Phase 1: Circle balloons out (smoother)
    setTimeout(() => {
      circle.style.width = '140px';
      circle.style.height = '140px';
    }, 10);
    
    // Phase 2: Transform to parent button style as circle expands
    setTimeout(() => {
      button.className = button.className.replace(/pixel-destructive__button|pixel-success__button/g, 'pixel-default__button');
      button.style.transition = 'background-color 0.3s ease-in-out';
      button.style.backgroundColor = 'white';
    }, 120);
    
    setTimeout(() => {
      // Phase 3: Circle disappears and icon changes to original background color
      circle.remove();
      icon.style.transition = 'color 0.2s ease-in-out';
      icon.style.color = originalBgColor; // Icon becomes the original button background color
      button.style.overflow = 'visible';
    }, 400);
  }

  function animateCardButtonReverse(button, isHeartBtn) {
    const icon = button.querySelector(isHeartBtn ? '.pixel-heart-icon' : '.pixel-check-icon');
    const currentIconColor = getComputedStyle(icon).color;
    
    // Get original button classes
    const originalClasses = isHeartBtn 
      ? 'heart-button-top-right pixel__button pixel-destructive__button box-shadow-margin text-sm font-medium px-3 py-3 flex items-center justify-center z-10 h-12'
      : 'pixel__button pixel-success__button box-shadow-margin text-sm font-medium px-3 py-3 flex items-center justify-center h-12';
    
    // Set button to clip the expanding circle
    button.style.overflow = 'hidden';
    button.style.position = 'relative';
    
    // Create circle element with current icon color
    const circle = document.createElement('div');
    circle.style.position = 'absolute';
    circle.style.top = '50%';
    circle.style.left = '50%';
    circle.style.width = '4px';
    circle.style.height = '4px';
    circle.style.backgroundColor = currentIconColor;
    circle.style.borderRadius = '50%';
    circle.style.transform = 'translate(-50%, -50%)';
    circle.style.transition = 'width 0.4s cubic-bezier(0.25, 0.46, 0.45, 0.94), height 0.4s cubic-bezier(0.25, 0.46, 0.45, 0.94)';
    circle.style.zIndex = '10';
    
    button.appendChild(circle);
    
    // Phase 1: Circle balloons out (smoother)
    setTimeout(() => {
      circle.style.width = '140px';
      circle.style.height = '140px';
    }, 10);
    
    // Phase 2: Restore original button styling as circle expands
    setTimeout(() => {
      button.className = originalClasses;
      button.style.transition = 'background-color 0.3s ease-in-out';
      button.style.backgroundColor = ''; // Remove inline white background
    }, 120);
    
    setTimeout(() => {
      // Phase 3: Circle disappears and icon returns to white
      circle.remove();
      icon.style.transition = 'color 0.2s ease-in-out';
      icon.style.color = ''; // Remove inline color, return to white
      button.style.overflow = 'visible';
      
      // Clean up transitions after animation
      setTimeout(() => {
        button.style.transition = '';
        icon.style.transition = '';
      }, 200);
    }, 400);
  }

  function renderPixelStars(container, rating) {
    container.innerHTML = '';
    
    for (let i = 1; i <= 5; i++) {
      // Calculate fill percentage for this star
      let fillPercentage = 0;
      if (rating >= i) {
        fillPercentage = 100; // Full star
      } else if (rating > i - 1) {
        fillPercentage = (rating - (i - 1)) * 100; // Partial star
      }
      
      // Only show stars that have some fill
      if (fillPercentage > 0) {
        const starContainer = document.createElement('div');
        starContainer.style.position = 'relative';
        starContainer.style.display = 'inline-block';
        
        // Create single star with clipping for partial fill
        const star = document.createElement('div');
        star.style.width = `${fillPercentage}%`;
        star.style.overflow = 'hidden';
        star.style.color = '#fbbf24'; // yellow-400
        star.innerHTML = `
          <svg width="16" height="16" viewBox="0 0 16 16" fill="currentColor" stroke="black" stroke-width="2" stroke-linejoin="miter" stroke-linecap="square" class="pixel-star">
            <path d="M8 0L6 6H0L5 9L3 16L8 12L13 16L11 9L16 6H10L8 0Z"/>
          </svg>
        `;
        
        starContainer.appendChild(star);
        container.appendChild(starContainer);
      }
    }
  }
</script>
