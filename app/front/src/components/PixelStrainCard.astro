---
// PixelActUI Strain Card Component
export interface Props {
  strain: {
    name: string;
    url?: string;
    type?: string;
    strain_type?: string;
    category?: string;
    rating?: number;
    thc?: string;
    thc_content?: string;
    positive_effects?: string;
    negative_effects?: string;
    flavors?: string;
    terpenes?: string;
    medical_benefits?: string;
    image_path?: string;
    image_url?: string;
    description?: string;
    aliases?: string;
    parents?: string;
    children?: string;
  };
}

const { strain } = Astro.props;

// Determine strain type with fallback logic
const getStrainType = (strain: any) => {
  if (strain.type && strain.type !== 'Unknown') {
    return strain.type;
  }
  if (strain.strain_type && strain.strain_type !== 'Unknown') {
    return strain.strain_type;
  }
  if (strain.category && strain.category !== 'Unknown') {
    return strain.category;
  }
  // Default based on common strain types
  return 'HYBRID';
};

const strainType = getStrainType(strain);
---

<div class="bg-card rounded-none hover:shadow-(--pixel-box-shadow-hover) transition-all relative">
  <!-- Heart button - top right -->
  <button 
    class="heart-button-top-right pixel__button pixel-destructive__button box-shadow-margin text-sm font-medium px-3 py-3 flex items-center justify-center z-10 h-12"
    style="top: 16px; right: 0px;"
    title="Add to favorites"
    data-strain-name={strain.name}
    data-action="favorite"
  >
    <svg width="16" height="16" viewBox="0 0 16 16" fill="none" stroke="currentColor" stroke-width="2" class="pixel-heart">
      <path d="M4 2c-1.1 0-2 .9-2 2 0 .5.2 1 .6 1.4L8 11l5.4-5.6c.4-.4.6-.9.6-1.4 0-1.1-.9-2-2-2s-2 .9-2 2c0-1.1-.9-2-2-2z"/>
    </svg>
  </button>
  
  <div class="py-4">
    
    <!-- Image at top -->
    <img 
      src={`https://cdn.budedex.space/strains/${strain.name.toLowerCase().replace(/\s+/g, '-').replace(/[^a-z0-9-]/g, '')}.png`} 
      alt={strain.name}
      class="w-full aspect-square object-cover rounded-none mb-4"
      loading="lazy"
      onerror="this.src='https://cdn.budedex.space/strains/default.png'"
    />
    
    <!-- Title -->
    <h3 class="font-bold pixel-font uppercase text-lg mb-2 truncate-ellipsis">
      {strain.name}
    </h3>
    
    <!-- Strain type and stars on same row -->
    <div class="flex items-center justify-between">
      <span class="text-muted-foreground text-sm pixel-font uppercase">
        {strainType}
      </span>
      
      {strain.rating && (
        <div class="flex items-center gap-1 transform -translate-y-0.5" id={`star-rating-${strain.name.replace(/\s+/g, '-').toLowerCase()}`} data-rating={strain.rating} title={`${strain.rating.toFixed(1)} / 5`}>
          <!-- Stars will be populated by JavaScript -->
        </div>
      )}
    </div>
  </div>
  
  <!-- Footer -->
  <div class="flex items-center py-4 gap-2">
    <a 
      href={`/strains/${strain.name.toLowerCase().replace(/\s+/g, '-').replace(/:/g, '-colon-').replace(/[^a-z0-9-]/g, '')}`}
      class="pixel__button pixel-default__button box-shadow-margin text-sm font-medium px-4 py-3 flex-1 uppercase flex items-center justify-center h-12"
    >
      VIEW
    </a>
    <button 
      class="pixel__button pixel-success__button box-shadow-margin text-sm font-medium px-3 py-3 flex items-center justify-center h-12"
      title="Mark as seen"
      data-strain-name={strain.name}
      data-action="seen"
    >
      <svg width="16" height="16" viewBox="0 0 16 16" fill="none" stroke="currentColor" stroke-width="2" class="pixel-check">
        <path d="M13 4L6 11L3 8"/>
      </svg>
    </button>
  </div>
</div>

<style>
  .line-clamp-2 {
    display: -webkit-box;
    -webkit-line-clamp: 2;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }
  
  .truncate-ellipsis {
    text-overflow: ellipsis !important;
    overflow: hidden !important;
    white-space: nowrap !important;
    display: block !important;
    max-width: 100% !important;
  }
  
  .pixel-heart {
    filter: drop-shadow(1px 1px 0px rgba(0,0,0,0.3));
  }
  
  .heart-button-top-right {
    position: absolute !important;
    left: auto !important;
  }
  
  .pixel-star {
    filter: drop-shadow(1px 1px 0px rgba(0,0,0,0.2));
    flex-shrink: 0;
  }
</style>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    // Find all star rating containers in cards
    const starRatingContainers = document.querySelectorAll('[id^="star-rating-"]');
    
    starRatingContainers.forEach(container => {
      const rating = parseFloat(container.getAttribute('data-rating') || '0');
      renderPixelStars(container, rating);
    });

    // Add click handlers for favorite and seen buttons
    const actionButtons = document.querySelectorAll('[data-action]');
    actionButtons.forEach(button => {
      button.addEventListener('click', handleActionClick);
    });
  });

  async function handleActionClick(event) {
    const button = event.currentTarget;
    const strainName = button.getAttribute('data-strain-name');
    const action = button.getAttribute('data-action');
    
    // Check if user is authenticated
    const authToken = localStorage.getItem('auth_token');
    if (!authToken) {
      // Redirect to sign in page
      window.location.href = '/account/sign-in';
      return;
    }

    try {
      // Disable button while processing
      button.disabled = true;
      button.style.opacity = '0.6';

      if (action === 'favorite') {
        // Import and call addToFavourites function
        const { addToFavourites } = await import('../services/account');
        await addToFavourites(strainName, authToken);
        
        // Visual feedback - could change heart color or show message
        button.style.color = '#ef4444'; // red-500 for filled heart
        button.title = 'Added to favorites!';
        
      } else if (action === 'seen') {
        // Import and call markAsComplete function
        const { markAsComplete } = await import('../services/account');
        await markAsComplete(strainName, authToken);
        
        // Visual feedback - could change check color or show message
        button.style.color = '#22c55e'; // green-500 for completed
        button.title = 'Marked as seen!';
      }

      // Show success message (optional)
      console.log(`Successfully ${action === 'favorite' ? 'favorited' : 'marked as seen'}: ${strainName}`);
      
    } catch (error) {
      console.error(`Failed to ${action}:`, error);
      
      // Show error message to user
      alert(`Failed to ${action === 'favorite' ? 'add to favorites' : 'mark as seen'}. Please try again.`);
      
    } finally {
      // Re-enable button
      button.disabled = false;
      button.style.opacity = '1';
    }
  }

  function renderPixelStars(container, rating) {
    container.innerHTML = '';
    
    for (let i = 1; i <= 5; i++) {
      // Calculate fill percentage for this star
      let fillPercentage = 0;
      if (rating >= i) {
        fillPercentage = 100; // Full star
      } else if (rating > i - 1) {
        fillPercentage = (rating - (i - 1)) * 100; // Partial star
      }
      
      // Only show stars that have some fill
      if (fillPercentage > 0) {
        const starContainer = document.createElement('div');
        starContainer.style.position = 'relative';
        starContainer.style.display = 'inline-block';
        
        // Create single star with clipping for partial fill
        const star = document.createElement('div');
        star.style.width = `${fillPercentage}%`;
        star.style.overflow = 'hidden';
        star.style.color = '#fbbf24'; // yellow-400
        star.innerHTML = `
          <svg width="16" height="16" viewBox="0 0 16 16" fill="currentColor" stroke="black" stroke-width="2" stroke-linejoin="miter" stroke-linecap="square" class="pixel-star">
            <path d="M8 0L6 6H0L5 9L3 16L8 12L13 16L11 9L16 6H10L8 0Z"/>
          </svg>
        `;
        
        starContainer.appendChild(star);
        container.appendChild(starContainer);
      }
    }
  }
</script>
